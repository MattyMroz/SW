
STM32_Base_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009b8  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08000b64  08000b64  00001b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bdc  08000bdc  0000200c  2**0
                  CONTENTS
  4 .ARM          00000000  08000bdc  08000bdc  0000200c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000bdc  08000bdc  0000200c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000bdc  08000bdc  00001bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000be0  08000be0  00001be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08000be4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08000bf0  0000200c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000bf0  00002034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000200c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000016aa  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007be  00000000  00000000  000036e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00003ea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000129  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000186d  00000000  00000000  00004191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021af  00000000  00000000  000059fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000052cf  00000000  00000000  00007bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ce7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000041c  00000000  00000000  0000cec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000097  00000000  00000000  0000d2dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000b4c 	.word	0x08000b4c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08000b4c 	.word	0x08000b4c

080001ec <Display_Init>:
    {SEG_A_PIN_MASK | SEG_B_PIN_MASK | SEG_C_PIN_MASK | SEG_D_PIN_MASK | SEG_F_PIN_MASK | SEG_G_PIN_MASK}                   // 9
};
const uint8_t SEGMENT_COUNT = sizeof(digit_segments) / sizeof(digit_segments[0]);

// Inicjalizuje GPIO dla wyświetlacza
void Display_Init(void) {
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b082      	sub	sp, #8
 80001f0:	af02      	add	r7, sp, #8
    GPIO_Clock_Enable(DIGIT_PORT_RCC_EN);
 80001f2:	2002      	movs	r0, #2
 80001f4:	f000 f942 	bl	800047c <GPIO_Clock_Enable>
    GPIO_Clock_Enable(SEG_PORT_RCC_EN);
 80001f8:	2040      	movs	r0, #64	@ 0x40
 80001fa:	f000 f93f 	bl	800047c <GPIO_Clock_Enable>

    // Konfiguracja pinów anod cyfr
    GPIO_Pin_Setup(DIGIT_PORT, DIGIT1_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 80001fe:	2300      	movs	r3, #0
 8000200:	9301      	str	r3, [sp, #4]
 8000202:	2300      	movs	r3, #0
 8000204:	9300      	str	r3, [sp, #0]
 8000206:	2300      	movs	r3, #0
 8000208:	2201      	movs	r2, #1
 800020a:	2105      	movs	r1, #5
 800020c:	4839      	ldr	r0, [pc, #228]	@ (80002f4 <Display_Init+0x108>)
 800020e:	f000 f94b 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(DIGIT_PORT, DIGIT2_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 8000212:	2300      	movs	r3, #0
 8000214:	9301      	str	r3, [sp, #4]
 8000216:	2300      	movs	r3, #0
 8000218:	9300      	str	r3, [sp, #0]
 800021a:	2300      	movs	r3, #0
 800021c:	2201      	movs	r2, #1
 800021e:	2104      	movs	r1, #4
 8000220:	4834      	ldr	r0, [pc, #208]	@ (80002f4 <Display_Init+0x108>)
 8000222:	f000 f941 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(DIGIT_PORT, DIGIT3_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 8000226:	2300      	movs	r3, #0
 8000228:	9301      	str	r3, [sp, #4]
 800022a:	2300      	movs	r3, #0
 800022c:	9300      	str	r3, [sp, #0]
 800022e:	2300      	movs	r3, #0
 8000230:	2201      	movs	r2, #1
 8000232:	2103      	movs	r1, #3
 8000234:	482f      	ldr	r0, [pc, #188]	@ (80002f4 <Display_Init+0x108>)
 8000236:	f000 f937 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(DIGIT_PORT, DIGIT4_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 800023a:	2300      	movs	r3, #0
 800023c:	9301      	str	r3, [sp, #4]
 800023e:	2300      	movs	r3, #0
 8000240:	9300      	str	r3, [sp, #0]
 8000242:	2300      	movs	r3, #0
 8000244:	2201      	movs	r2, #1
 8000246:	2102      	movs	r1, #2
 8000248:	482a      	ldr	r0, [pc, #168]	@ (80002f4 <Display_Init+0x108>)
 800024a:	f000 f92d 	bl	80004a8 <GPIO_Pin_Setup>

    // Konfiguracja pinów segmentów
    GPIO_Pin_Setup(SEG_PORT, SEG_A_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 800024e:	2300      	movs	r3, #0
 8000250:	9301      	str	r3, [sp, #4]
 8000252:	2300      	movs	r3, #0
 8000254:	9300      	str	r3, [sp, #0]
 8000256:	2300      	movs	r3, #0
 8000258:	2201      	movs	r2, #1
 800025a:	2100      	movs	r1, #0
 800025c:	4826      	ldr	r0, [pc, #152]	@ (80002f8 <Display_Init+0x10c>)
 800025e:	f000 f923 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(SEG_PORT, SEG_B_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 8000262:	2300      	movs	r3, #0
 8000264:	9301      	str	r3, [sp, #4]
 8000266:	2300      	movs	r3, #0
 8000268:	9300      	str	r3, [sp, #0]
 800026a:	2300      	movs	r3, #0
 800026c:	2201      	movs	r2, #1
 800026e:	2101      	movs	r1, #1
 8000270:	4821      	ldr	r0, [pc, #132]	@ (80002f8 <Display_Init+0x10c>)
 8000272:	f000 f919 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(SEG_PORT, SEG_C_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 8000276:	2300      	movs	r3, #0
 8000278:	9301      	str	r3, [sp, #4]
 800027a:	2300      	movs	r3, #0
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2300      	movs	r3, #0
 8000280:	2201      	movs	r2, #1
 8000282:	2102      	movs	r1, #2
 8000284:	481c      	ldr	r0, [pc, #112]	@ (80002f8 <Display_Init+0x10c>)
 8000286:	f000 f90f 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(SEG_PORT, SEG_D_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 800028a:	2300      	movs	r3, #0
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	2300      	movs	r3, #0
 8000290:	9300      	str	r3, [sp, #0]
 8000292:	2300      	movs	r3, #0
 8000294:	2201      	movs	r2, #1
 8000296:	2103      	movs	r1, #3
 8000298:	4817      	ldr	r0, [pc, #92]	@ (80002f8 <Display_Init+0x10c>)
 800029a:	f000 f905 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(SEG_PORT, SEG_E_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 800029e:	2300      	movs	r3, #0
 80002a0:	9301      	str	r3, [sp, #4]
 80002a2:	2300      	movs	r3, #0
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	2300      	movs	r3, #0
 80002a8:	2201      	movs	r2, #1
 80002aa:	2104      	movs	r1, #4
 80002ac:	4812      	ldr	r0, [pc, #72]	@ (80002f8 <Display_Init+0x10c>)
 80002ae:	f000 f8fb 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(SEG_PORT, SEG_F_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 80002b2:	2300      	movs	r3, #0
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	2300      	movs	r3, #0
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2300      	movs	r3, #0
 80002bc:	2201      	movs	r2, #1
 80002be:	2105      	movs	r1, #5
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <Display_Init+0x10c>)
 80002c2:	f000 f8f1 	bl	80004a8 <GPIO_Pin_Setup>
    GPIO_Pin_Setup(SEG_PORT, SEG_G_PIN_NUM, GPIO_MODER_MODE_OUTPUT, GPIO_OTYPER_OT_PP, GPIO_OSPEEDR_OSPEED_LOW, GPIO_PUPDR_PUPD_NONE);
 80002c6:	2300      	movs	r3, #0
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2300      	movs	r3, #0
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	2300      	movs	r3, #0
 80002d0:	2201      	movs	r2, #1
 80002d2:	2106      	movs	r1, #6
 80002d4:	4808      	ldr	r0, [pc, #32]	@ (80002f8 <Display_Init+0x10c>)
 80002d6:	f000 f8e7 	bl	80004a8 <GPIO_Pin_Setup>

    // Inicjalizacja stanów początkowych
    GPIO_WritePin(DIGIT_PORT, ALL_DIGIT_PINS_MASK, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	213c      	movs	r1, #60	@ 0x3c
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <Display_Init+0x108>)
 80002e0:	f000 f94b 	bl	800057a <GPIO_WritePin>
    GPIO_WritePin(SEG_PORT, ALL_SEGMENT_PINS_MASK, 0);
 80002e4:	2200      	movs	r2, #0
 80002e6:	217f      	movs	r1, #127	@ 0x7f
 80002e8:	4803      	ldr	r0, [pc, #12]	@ (80002f8 <Display_Init+0x10c>)
 80002ea:	f000 f946 	bl	800057a <GPIO_WritePin>
}
 80002ee:	bf00      	nop
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	48000400 	.word	0x48000400
 80002f8:	48001800 	.word	0x48001800

080002fc <Get_Digits_For_Display>:

// Konwertuje liczbę na tablicę cyfr do wyświetlenia
// number Liczba do konwersji
// digits_array Tablica na cyfry (musi mieć DIGIT_COUNT elementów)
void Get_Digits_For_Display(uint16_t number, uint8_t* digits_array) {
 80002fc:	b480      	push	{r7}
 80002fe:	b083      	sub	sp, #12
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	80fb      	strh	r3, [r7, #6]
    if (DIGIT_COUNT < 4 && number > 0) {} // Upewnij się, że digits_array ma co najmniej DIGIT_COUNT elementów

    if (number > 9999) number = 9999; // Ograniczenie do 9999 (dla 4 cyfr)
 8000308:	88fb      	ldrh	r3, [r7, #6]
 800030a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800030e:	4293      	cmp	r3, r2
 8000310:	d902      	bls.n	8000318 <Get_Digits_For_Display+0x1c>
 8000312:	f242 730f 	movw	r3, #9999	@ 0x270f
 8000316:	80fb      	strh	r3, [r7, #6]

    // Rozkład liczby na cyfry - specyficzne dla 4 cyfr
    // Indeks 0 to jedności, 1 to dziesiątki, itd.
    digits_array[0] = number % 10;
 8000318:	88fa      	ldrh	r2, [r7, #6]
 800031a:	4b2c      	ldr	r3, [pc, #176]	@ (80003cc <Get_Digits_For_Display+0xd0>)
 800031c:	fba3 1302 	umull	r1, r3, r3, r2
 8000320:	08d9      	lsrs	r1, r3, #3
 8000322:	460b      	mov	r3, r1
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	440b      	add	r3, r1
 8000328:	005b      	lsls	r3, r3, #1
 800032a:	1ad3      	subs	r3, r2, r3
 800032c:	b29b      	uxth	r3, r3
 800032e:	b2da      	uxtb	r2, r3
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	701a      	strb	r2, [r3, #0]
    if (DIGIT_COUNT > 1) digits_array[1] = (number / 10) % 10;
 8000334:	2304      	movs	r3, #4
 8000336:	2b01      	cmp	r3, #1
 8000338:	d913      	bls.n	8000362 <Get_Digits_For_Display+0x66>
 800033a:	88fb      	ldrh	r3, [r7, #6]
 800033c:	4a23      	ldr	r2, [pc, #140]	@ (80003cc <Get_Digits_For_Display+0xd0>)
 800033e:	fba2 2303 	umull	r2, r3, r2, r3
 8000342:	08db      	lsrs	r3, r3, #3
 8000344:	b29a      	uxth	r2, r3
 8000346:	4b21      	ldr	r3, [pc, #132]	@ (80003cc <Get_Digits_For_Display+0xd0>)
 8000348:	fba3 1302 	umull	r1, r3, r3, r2
 800034c:	08d9      	lsrs	r1, r3, #3
 800034e:	460b      	mov	r3, r1
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	440b      	add	r3, r1
 8000354:	005b      	lsls	r3, r3, #1
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	b29a      	uxth	r2, r3
 800035a:	683b      	ldr	r3, [r7, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	b2d2      	uxtb	r2, r2
 8000360:	701a      	strb	r2, [r3, #0]
    if (DIGIT_COUNT > 2) digits_array[2] = (number / 100) % 10;
 8000362:	2304      	movs	r3, #4
 8000364:	2b02      	cmp	r3, #2
 8000366:	d913      	bls.n	8000390 <Get_Digits_For_Display+0x94>
 8000368:	88fb      	ldrh	r3, [r7, #6]
 800036a:	4a19      	ldr	r2, [pc, #100]	@ (80003d0 <Get_Digits_For_Display+0xd4>)
 800036c:	fba2 2303 	umull	r2, r3, r2, r3
 8000370:	095b      	lsrs	r3, r3, #5
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b15      	ldr	r3, [pc, #84]	@ (80003cc <Get_Digits_For_Display+0xd0>)
 8000376:	fba3 1302 	umull	r1, r3, r3, r2
 800037a:	08d9      	lsrs	r1, r3, #3
 800037c:	460b      	mov	r3, r1
 800037e:	009b      	lsls	r3, r3, #2
 8000380:	440b      	add	r3, r1
 8000382:	005b      	lsls	r3, r3, #1
 8000384:	1ad3      	subs	r3, r2, r3
 8000386:	b29a      	uxth	r2, r3
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	3302      	adds	r3, #2
 800038c:	b2d2      	uxtb	r2, r2
 800038e:	701a      	strb	r2, [r3, #0]
    if (DIGIT_COUNT > 3) digits_array[3] = (number / 1000) % 10;
 8000390:	2304      	movs	r3, #4
 8000392:	2b03      	cmp	r3, #3
 8000394:	d913      	bls.n	80003be <Get_Digits_For_Display+0xc2>
 8000396:	88fb      	ldrh	r3, [r7, #6]
 8000398:	4a0e      	ldr	r2, [pc, #56]	@ (80003d4 <Get_Digits_For_Display+0xd8>)
 800039a:	fba2 2303 	umull	r2, r3, r2, r3
 800039e:	099b      	lsrs	r3, r3, #6
 80003a0:	b29a      	uxth	r2, r3
 80003a2:	4b0a      	ldr	r3, [pc, #40]	@ (80003cc <Get_Digits_For_Display+0xd0>)
 80003a4:	fba3 1302 	umull	r1, r3, r3, r2
 80003a8:	08d9      	lsrs	r1, r3, #3
 80003aa:	460b      	mov	r3, r1
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	440b      	add	r3, r1
 80003b0:	005b      	lsls	r3, r3, #1
 80003b2:	1ad3      	subs	r3, r2, r3
 80003b4:	b29a      	uxth	r2, r3
 80003b6:	683b      	ldr	r3, [r7, #0]
 80003b8:	3303      	adds	r3, #3
 80003ba:	b2d2      	uxtb	r2, r2
 80003bc:	701a      	strb	r2, [r3, #0]
    //     else
    //     {
    //         leading_zero = 0;
    //     }
    // }
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	cccccccd 	.word	0xcccccccd
 80003d0:	51eb851f 	.word	0x51eb851f
 80003d4:	10624dd3 	.word	0x10624dd3

080003d8 <Display_Digit>:

// Wyświetla pojedynczą cyfrę na wyświetlaczu
// digit_value Cyfra do wyświetlenia (0-9 lub BLANK_DIGIT)
// digit_position Pozycja cyfry (0-3)
void Display_Digit(uint8_t digit_value, uint8_t digit_position) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b086      	sub	sp, #24
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	460a      	mov	r2, r1
 80003e2:	71fb      	strb	r3, [r7, #7]
 80003e4:	4613      	mov	r3, r2
 80003e6:	71bb      	strb	r3, [r7, #6]
    uint16_t segments_to_set = 0;
 80003e8:	2300      	movs	r3, #0
 80003ea:	82fb      	strh	r3, [r7, #22]
    // Sprawdź, czy digit_value jest poprawną cyfrą (0-9)
    if (digit_value < SEGMENT_COUNT) {
 80003ec:	220a      	movs	r2, #10
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d204      	bcs.n	80003fe <Display_Digit+0x26>
        segments_to_set = digit_segments[digit_value].SEGMENTS;
 80003f4:	79fb      	ldrb	r3, [r7, #7]
 80003f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000470 <Display_Digit+0x98>)
 80003f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80003fc:	82fb      	strh	r3, [r7, #22]
    }

    for(int i = 0; i < 7; i++) { // Zakładamy 7 segmentów (A-G)
 80003fe:	2300      	movs	r3, #0
 8000400:	613b      	str	r3, [r7, #16]
 8000402:	e01c      	b.n	800043e <Display_Digit+0x66>
        uint16_t current_segment_pin_mask = (1UL << (SEG_A_PIN_NUM + i));
 8000404:	2201      	movs	r2, #1
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	fa02 f303 	lsl.w	r3, r2, r3
 800040c:	81fb      	strh	r3, [r7, #14]
        if ((segments_to_set >> i) & 0x01) {
 800040e:	8afa      	ldrh	r2, [r7, #22]
 8000410:	693b      	ldr	r3, [r7, #16]
 8000412:	fa42 f303 	asr.w	r3, r2, r3
 8000416:	f003 0301 	and.w	r3, r3, #1
 800041a:	2b00      	cmp	r3, #0
 800041c:	d006      	beq.n	800042c <Display_Digit+0x54>
             GPIO_WritePin(SEG_PORT, current_segment_pin_mask, 1);
 800041e:	89fb      	ldrh	r3, [r7, #14]
 8000420:	2201      	movs	r2, #1
 8000422:	4619      	mov	r1, r3
 8000424:	4813      	ldr	r0, [pc, #76]	@ (8000474 <Display_Digit+0x9c>)
 8000426:	f000 f8a8 	bl	800057a <GPIO_WritePin>
 800042a:	e005      	b.n	8000438 <Display_Digit+0x60>
        } else {
             GPIO_WritePin(SEG_PORT, current_segment_pin_mask, 0);
 800042c:	89fb      	ldrh	r3, [r7, #14]
 800042e:	2200      	movs	r2, #0
 8000430:	4619      	mov	r1, r3
 8000432:	4810      	ldr	r0, [pc, #64]	@ (8000474 <Display_Digit+0x9c>)
 8000434:	f000 f8a1 	bl	800057a <GPIO_WritePin>
    for(int i = 0; i < 7; i++) { // Zakładamy 7 segmentów (A-G)
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	3301      	adds	r3, #1
 800043c:	613b      	str	r3, [r7, #16]
 800043e:	693b      	ldr	r3, [r7, #16]
 8000440:	2b06      	cmp	r3, #6
 8000442:	dddf      	ble.n	8000404 <Display_Digit+0x2c>
        }
    }

    // Włącz odpowiednią anodę cyfry, jeśli pozycja jest prawidłowa
    if (digit_position < DIGIT_COUNT) {
 8000444:	2204      	movs	r2, #4
 8000446:	79bb      	ldrb	r3, [r7, #6]
 8000448:	4293      	cmp	r3, r2
 800044a:	d20c      	bcs.n	8000466 <Display_Digit+0x8e>
        GPIO_WritePin(digits[digit_position].PORT, digits[digit_position].PIN, 1);
 800044c:	79bb      	ldrb	r3, [r7, #6]
 800044e:	4a0a      	ldr	r2, [pc, #40]	@ (8000478 <Display_Digit+0xa0>)
 8000450:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000454:	79bb      	ldrb	r3, [r7, #6]
 8000456:	4a08      	ldr	r2, [pc, #32]	@ (8000478 <Display_Digit+0xa0>)
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	4413      	add	r3, r2
 800045c:	889b      	ldrh	r3, [r3, #4]
 800045e:	2201      	movs	r2, #1
 8000460:	4619      	mov	r1, r3
 8000462:	f000 f88a 	bl	800057a <GPIO_WritePin>
    }
 8000466:	bf00      	nop
 8000468:	3718      	adds	r7, #24
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	08000b88 	.word	0x08000b88
 8000474:	48001800 	.word	0x48001800
 8000478:	08000b64 	.word	0x08000b64

0800047c <GPIO_Clock_Enable>:
/* gpio.c */
#include "gpio.h"

// Włącza zegar dla portu GPIO
// GPIO_Port_Mask Maska bitowa dla zegara portu (np. RCC_AHB2ENR_GPIOBEN)
void GPIO_Clock_Enable(uint32_t GPIO_Port_Mask) {
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
    RCC->AHB2ENR |= GPIO_Port_Mask;
 8000484:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <GPIO_Clock_Enable+0x28>)
 8000486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000488:	4906      	ldr	r1, [pc, #24]	@ (80004a4 <GPIO_Clock_Enable+0x28>)
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	4313      	orrs	r3, r2
 800048e:	64cb      	str	r3, [r1, #76]	@ 0x4c
    volatile uint32_t dummy_read = RCC->AHB2ENR; // Opóźnienie po włączeniu zegara
 8000490:	4b04      	ldr	r3, [pc, #16]	@ (80004a4 <GPIO_Clock_Enable+0x28>)
 8000492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000494:	60fb      	str	r3, [r7, #12]
    (void)dummy_read;
 8000496:	68fb      	ldr	r3, [r7, #12]
}
 8000498:	bf00      	nop
 800049a:	3714      	adds	r7, #20
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40021000 	.word	0x40021000

080004a8 <GPIO_Pin_Setup>:
// PinNumber Numer pinu (0-15)
// Mode Tryb pracy pinu (INPUT, OUTPUT, ALTERNATE, ANALOG)
// OutputType Typ wyjścia (PP, OD)
// Speed Prędkość wyjścia (LOW, MEDIUM, HIGH, VHIGH)
// Pull Podciąganie (NONE, UP, DOWN)
void GPIO_Pin_Setup(GPIO_TypeDef* GPIOx_INSTANCE, uint16_t PinNumber, uint32_t Mode, uint32_t OutputType, uint32_t Speed, uint32_t Pull) {
 80004a8:	b480      	push	{r7}
 80004aa:	b089      	sub	sp, #36	@ 0x24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	60f8      	str	r0, [r7, #12]
 80004b0:	607a      	str	r2, [r7, #4]
 80004b2:	603b      	str	r3, [r7, #0]
 80004b4:	460b      	mov	r3, r1
 80004b6:	817b      	strh	r3, [r7, #10]
    uint32_t moder_pos = PinNumber * 2;
 80004b8:	897b      	ldrh	r3, [r7, #10]
 80004ba:	005b      	lsls	r3, r3, #1
 80004bc:	61fb      	str	r3, [r7, #28]
    uint32_t ospeedr_pos = PinNumber * 2;
 80004be:	897b      	ldrh	r3, [r7, #10]
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	61bb      	str	r3, [r7, #24]
    uint32_t pupdr_pos = PinNumber * 2;
 80004c4:	897b      	ldrh	r3, [r7, #10]
 80004c6:	005b      	lsls	r3, r3, #1
 80004c8:	617b      	str	r3, [r7, #20]

    GPIOx_INSTANCE->MODER &= ~(0x3UL << moder_pos);
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	681a      	ldr	r2, [r3, #0]
 80004ce:	2103      	movs	r1, #3
 80004d0:	69fb      	ldr	r3, [r7, #28]
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	43db      	mvns	r3, r3
 80004d8:	401a      	ands	r2, r3
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	601a      	str	r2, [r3, #0]
    GPIOx_INSTANCE->MODER |= (Mode << moder_pos);
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ea:	431a      	orrs	r2, r3
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	601a      	str	r2, [r3, #0]

    if ((Mode == GPIO_MODER_MODE_OUTPUT) || (Mode == GPIO_MODER_MODE_ALTERNATE)) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d002      	beq.n	80004fc <GPIO_Pin_Setup+0x54>
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d125      	bne.n	8000548 <GPIO_Pin_Setup+0xa0>
        GPIOx_INSTANCE->OTYPER &= ~(1UL << PinNumber);
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	685a      	ldr	r2, [r3, #4]
 8000500:	897b      	ldrh	r3, [r7, #10]
 8000502:	2101      	movs	r1, #1
 8000504:	fa01 f303 	lsl.w	r3, r1, r3
 8000508:	43db      	mvns	r3, r3
 800050a:	401a      	ands	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	605a      	str	r2, [r3, #4]
        GPIOx_INSTANCE->OTYPER |= (OutputType << PinNumber);
 8000510:	68fb      	ldr	r3, [r7, #12]
 8000512:	685a      	ldr	r2, [r3, #4]
 8000514:	897b      	ldrh	r3, [r7, #10]
 8000516:	6839      	ldr	r1, [r7, #0]
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	431a      	orrs	r2, r3
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	605a      	str	r2, [r3, #4]

        GPIOx_INSTANCE->OSPEEDR &= ~(0x3UL << ospeedr_pos);
 8000522:	68fb      	ldr	r3, [r7, #12]
 8000524:	689a      	ldr	r2, [r3, #8]
 8000526:	2103      	movs	r1, #3
 8000528:	69bb      	ldr	r3, [r7, #24]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	43db      	mvns	r3, r3
 8000530:	401a      	ands	r2, r3
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	609a      	str	r2, [r3, #8]
        GPIOx_INSTANCE->OSPEEDR |= (Speed << ospeedr_pos);
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800053c:	69bb      	ldr	r3, [r7, #24]
 800053e:	fa01 f303 	lsl.w	r3, r1, r3
 8000542:	431a      	orrs	r2, r3
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	609a      	str	r2, [r3, #8]
    }

    GPIOx_INSTANCE->PUPDR &= ~(0x3UL << pupdr_pos);
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	68da      	ldr	r2, [r3, #12]
 800054c:	2103      	movs	r1, #3
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	fa01 f303 	lsl.w	r3, r1, r3
 8000554:	43db      	mvns	r3, r3
 8000556:	401a      	ands	r2, r3
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	60da      	str	r2, [r3, #12]
    GPIOx_INSTANCE->PUPDR |= (Pull << pupdr_pos);
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	68da      	ldr	r2, [r3, #12]
 8000560:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	fa01 f303 	lsl.w	r3, r1, r3
 8000568:	431a      	orrs	r2, r3
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	60da      	str	r2, [r3, #12]
}
 800056e:	bf00      	nop
 8000570:	3724      	adds	r7, #36	@ 0x24
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <GPIO_WritePin>:

// Ustawia stan pinu GPIO
// GPIOx_INSTANCE Wskaźnik do instancji GPIO (np. GPIOB)
// PinMask Maska bitowa pinu (1<<PIN_NUM)
// PinState Wartość 0 lub 1
void GPIO_WritePin(GPIO_TypeDef* GPIOx_INSTANCE, uint16_t PinMask, uint8_t PinState) {
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	460b      	mov	r3, r1
 8000584:	807b      	strh	r3, [r7, #2]
 8000586:	4613      	mov	r3, r2
 8000588:	707b      	strb	r3, [r7, #1]
    if (PinState != 0) { // Ustaw bit
 800058a:	787b      	ldrb	r3, [r7, #1]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d003      	beq.n	8000598 <GPIO_WritePin+0x1e>
        GPIOx_INSTANCE->BSRR = (uint32_t)PinMask;
 8000590:	887a      	ldrh	r2, [r7, #2]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	619a      	str	r2, [r3, #24]
    } else { // Resetuj bit
        GPIOx_INSTANCE->BSRR = (uint32_t)PinMask << 16U;
    }
}
 8000596:	e003      	b.n	80005a0 <GPIO_WritePin+0x26>
        GPIOx_INSTANCE->BSRR = (uint32_t)PinMask << 16U;
 8000598:	887b      	ldrh	r3, [r7, #2]
 800059a:	041a      	lsls	r2, r3, #16
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	619a      	str	r2, [r3, #24]
}
 80005a0:	bf00      	nop
 80005a2:	370c      	adds	r7, #12
 80005a4:	46bd      	mov	sp, r7
 80005a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005aa:	4770      	bx	lr

080005ac <GPIO_ReadPin>:

// Odczytuje stan pinu GPIO
// GPIOx_INSTANCE Wskaźnik do instancji GPIO (np. GPIOB)
// PinMask Maska bitowa pinu (1<<PIN_NUM)
// Zwraca stan pinu (0 lub 1)
uint8_t GPIO_ReadPin(GPIO_TypeDef* GPIOx_INSTANCE, uint16_t PinMask) {
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	460b      	mov	r3, r1
 80005b6:	807b      	strh	r3, [r7, #2]
    return (GPIOx_INSTANCE->IDR & PinMask) ? 1 : 0;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	691a      	ldr	r2, [r3, #16]
 80005bc:	887b      	ldrh	r3, [r7, #2]
 80005be:	4013      	ands	r3, r2
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	bf14      	ite	ne
 80005c4:	2301      	movne	r3, #1
 80005c6:	2300      	moveq	r3, #0
 80005c8:	b2db      	uxtb	r3, r3
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
	...

080005d8 <My_EnableVddIO2>:

// Włącza zasilanie VDDIO2 (PG[15:2])
void My_EnableVddIO2(void) {
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
    RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN; // Włącz zegar dla PWR
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <My_EnableVddIO2+0x34>)
 80005e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005e2:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <My_EnableVddIO2+0x34>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005e8:	6593      	str	r3, [r2, #88]	@ 0x58
    volatile uint32_t dummy_read = RCC->APB1ENR1; // Opóźnienie
 80005ea:	4b08      	ldr	r3, [pc, #32]	@ (800060c <My_EnableVddIO2+0x34>)
 80005ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005ee:	607b      	str	r3, [r7, #4]
    (void)dummy_read;
 80005f0:	687b      	ldr	r3, [r7, #4]
    PWR->CR2 |= PWR_CR2_IOSV; // Ustaw bit IOSV (Włącza zasilanie VDDIO2 dla PG[15:2])
 80005f2:	4b07      	ldr	r3, [pc, #28]	@ (8000610 <My_EnableVddIO2+0x38>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	4a06      	ldr	r2, [pc, #24]	@ (8000610 <My_EnableVddIO2+0x38>)
 80005f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005fc:	6053      	str	r3, [r2, #4]
 80005fe:	bf00      	nop
 8000600:	370c      	adds	r7, #12
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	40021000 	.word	0x40021000
 8000610:	40007000 	.word	0x40007000

08000614 <System_Init>:
extern uint8_t digits_to_display[];
extern uint16_t counter_value;

// Inicjalizuje wszystkie komponenty systemu
void System_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  // Inicjalizacja komponentów
  My_EnableVddIO2();
 8000618:	f7ff ffde 	bl	80005d8 <My_EnableVddIO2>
  Display_Init();
 800061c:	f7ff fde6 	bl	80001ec <Display_Init>
  Joystick_Init();
 8000620:	f000 f80c 	bl	800063c <Joystick_Init>

  // Inicjalizacja tablicy digits_to_display wartością początkową licznika
  Get_Digits_For_Display(counter_value, digits_to_display);
 8000624:	4b03      	ldr	r3, [pc, #12]	@ (8000634 <System_Init+0x20>)
 8000626:	881b      	ldrh	r3, [r3, #0]
 8000628:	4903      	ldr	r1, [pc, #12]	@ (8000638 <System_Init+0x24>)
 800062a:	4618      	mov	r0, r3
 800062c:	f7ff fe66 	bl	80002fc <Get_Digits_For_Display>
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000028 	.word	0x20000028
 8000638:	20000000 	.word	0x20000000

0800063c <Joystick_Init>:
uint8_t joy_ok_prev_stable_state = 1; // 1 = zwolniony (stan początkowy), 0 = wciśnięty
uint8_t joy_ok_last_raw_state = 1;    // Zakładamy początkowo zwolniony
uint32_t joy_ok_last_change_time = 0;  // Czas ostatniej zmiany stanu surowego joysticka

// Inicjalizuje GPIO dla joysticka
void Joystick_Init(void) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af02      	add	r7, sp, #8
    GPIO_Clock_Enable(JOY_OK_PORT_RCC_EN);
 8000642:	2010      	movs	r0, #16
 8000644:	f7ff ff1a 	bl	800047c <GPIO_Clock_Enable>
    GPIO_Pin_Setup(JOY_OK_PORT, JOY_OK_PIN_NUM, GPIO_MODER_MODE_INPUT, 0, 0, GPIO_PUPDR_PUPD_UP);
 8000648:	2301      	movs	r3, #1
 800064a:	9301      	str	r3, [sp, #4]
 800064c:	2300      	movs	r3, #0
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	2300      	movs	r3, #0
 8000652:	2200      	movs	r2, #0
 8000654:	210f      	movs	r1, #15
 8000656:	4803      	ldr	r0, [pc, #12]	@ (8000664 <Joystick_Init+0x28>)
 8000658:	f7ff ff26 	bl	80004a8 <GPIO_Pin_Setup>
}
 800065c:	bf00      	nop
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	48001000 	.word	0x48001000

08000668 <Joystick_Get_OK_Raw_State>:

// Odczytuje surowy stan przycisku joysticka (bez debouncingu)
// Zwraca stan przycisku (0: wciśnięty, 1: zwolniony)
uint8_t Joystick_Get_OK_Raw_State(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    return GPIO_ReadPin(JOY_OK_PORT, JOY_OK_PIN_MASK);
 800066c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000670:	4802      	ldr	r0, [pc, #8]	@ (800067c <Joystick_Get_OK_Raw_State+0x14>)
 8000672:	f7ff ff9b 	bl	80005ac <GPIO_ReadPin>
 8000676:	4603      	mov	r3, r0
 8000678:	4618      	mov	r0, r3
 800067a:	bd80      	pop	{r7, pc}
 800067c:	48001000 	.word	0x48001000

08000680 <Process_Joystick>:
static uint16_t joystick_cycle_counter = 0;
static uint16_t counter_cycle_counter = 0;

// Odczytuje i przetwarza stan joysticka z prostym debouncingiem
void Process_Joystick(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
    uint8_t raw_state = Joystick_Get_OK_Raw_State();
 8000686:	f7ff ffef 	bl	8000668 <Joystick_Get_OK_Raw_State>
 800068a:	4603      	mov	r3, r0
 800068c:	71fb      	strb	r3, [r7, #7]

    if (raw_state == joy_ok_state) {
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <Process_Joystick+0x48>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	79fa      	ldrb	r2, [r7, #7]
 8000694:	429a      	cmp	r2, r3
 8000696:	d103      	bne.n	80006a0 <Process_Joystick+0x20>
        // Stan stabilny - resetujemy licznik debounce
        joy_ok_debounce_counter = 0;
 8000698:	4b0c      	ldr	r3, [pc, #48]	@ (80006cc <Process_Joystick+0x4c>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
        if (joy_ok_debounce_counter >= 3) {
            joy_ok_state = raw_state;
            joy_ok_debounce_counter = 0;
        }
    }
}
 800069e:	e00f      	b.n	80006c0 <Process_Joystick+0x40>
        joy_ok_debounce_counter++;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	@ (80006cc <Process_Joystick+0x4c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	3301      	adds	r3, #1
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <Process_Joystick+0x4c>)
 80006aa:	701a      	strb	r2, [r3, #0]
        if (joy_ok_debounce_counter >= 3) {
 80006ac:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <Process_Joystick+0x4c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	d905      	bls.n	80006c0 <Process_Joystick+0x40>
            joy_ok_state = raw_state;
 80006b4:	4a04      	ldr	r2, [pc, #16]	@ (80006c8 <Process_Joystick+0x48>)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	7013      	strb	r3, [r2, #0]
            joy_ok_debounce_counter = 0;
 80006ba:	4b04      	ldr	r3, [pc, #16]	@ (80006cc <Process_Joystick+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	701a      	strb	r2, [r3, #0]
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	20000004 	.word	0x20000004
 80006cc:	2000002b 	.word	0x2000002b

080006d0 <Update_Counter_Logic>:

// Aktualizuje wartość licznika na podstawie zapamiętanego stanu joysticka
void Update_Counter_Logic(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
    if (joy_ok_state == 0) { // Przycisk wciśnięty
 80006d4:	4b15      	ldr	r3, [pc, #84]	@ (800072c <Update_Counter_Logic+0x5c>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d10f      	bne.n	80006fc <Update_Counter_Logic+0x2c>
        if (counter_value == 0) {
 80006dc:	4b14      	ldr	r3, [pc, #80]	@ (8000730 <Update_Counter_Logic+0x60>)
 80006de:	881b      	ldrh	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d104      	bne.n	80006ee <Update_Counter_Logic+0x1e>
            counter_value = 9999;
 80006e4:	4b12      	ldr	r3, [pc, #72]	@ (8000730 <Update_Counter_Logic+0x60>)
 80006e6:	f242 720f 	movw	r2, #9999	@ 0x270f
 80006ea:	801a      	strh	r2, [r3, #0]
 80006ec:	e015      	b.n	800071a <Update_Counter_Logic+0x4a>
        } else {
            counter_value--;
 80006ee:	4b10      	ldr	r3, [pc, #64]	@ (8000730 <Update_Counter_Logic+0x60>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000730 <Update_Counter_Logic+0x60>)
 80006f8:	801a      	strh	r2, [r3, #0]
 80006fa:	e00e      	b.n	800071a <Update_Counter_Logic+0x4a>
        }
    } else { // Przycisk zwolniony
        counter_value++;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <Update_Counter_Logic+0x60>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b0a      	ldr	r3, [pc, #40]	@ (8000730 <Update_Counter_Logic+0x60>)
 8000706:	801a      	strh	r2, [r3, #0]
        if (counter_value > 9999) {
 8000708:	4b09      	ldr	r3, [pc, #36]	@ (8000730 <Update_Counter_Logic+0x60>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000710:	4293      	cmp	r3, r2
 8000712:	d902      	bls.n	800071a <Update_Counter_Logic+0x4a>
            counter_value = 0;
 8000714:	4b06      	ldr	r3, [pc, #24]	@ (8000730 <Update_Counter_Logic+0x60>)
 8000716:	2200      	movs	r2, #0
 8000718:	801a      	strh	r2, [r3, #0]
        }
    }

    Get_Digits_For_Display(counter_value, digits_to_display);
 800071a:	4b05      	ldr	r3, [pc, #20]	@ (8000730 <Update_Counter_Logic+0x60>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	4905      	ldr	r1, [pc, #20]	@ (8000734 <Update_Counter_Logic+0x64>)
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fdeb 	bl	80002fc <Get_Digits_For_Display>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000004 	.word	0x20000004
 8000730:	20000028 	.word	0x20000028
 8000734:	20000000 	.word	0x20000000

08000738 <Refresh_Display_Logic>:

// Odświeża wyświetlacz (obsługa multipleksowania)
void Refresh_Display_Logic(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    // Wyłącz aktualnie wyświetlaną cyfrę
    GPIO_WritePin(digits[current_display_digit_idx].PORT, digits[current_display_digit_idx].PIN, 0);
 800073c:	4b15      	ldr	r3, [pc, #84]	@ (8000794 <Refresh_Display_Logic+0x5c>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	461a      	mov	r2, r3
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <Refresh_Display_Logic+0x60>)
 8000744:	f853 0032 	ldr.w	r0, [r3, r2, lsl #3]
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <Refresh_Display_Logic+0x5c>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <Refresh_Display_Logic+0x60>)
 800074e:	00db      	lsls	r3, r3, #3
 8000750:	4413      	add	r3, r2
 8000752:	889b      	ldrh	r3, [r3, #4]
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	f7ff ff0f 	bl	800057a <GPIO_WritePin>

    // Przejdź do następnej cyfry
    current_display_digit_idx++;
 800075c:	4b0d      	ldr	r3, [pc, #52]	@ (8000794 <Refresh_Display_Logic+0x5c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	b2da      	uxtb	r2, r3
 8000764:	4b0b      	ldr	r3, [pc, #44]	@ (8000794 <Refresh_Display_Logic+0x5c>)
 8000766:	701a      	strb	r2, [r3, #0]
    if (current_display_digit_idx >= DIGIT_COUNT) {
 8000768:	4b0a      	ldr	r3, [pc, #40]	@ (8000794 <Refresh_Display_Logic+0x5c>)
 800076a:	781a      	ldrb	r2, [r3, #0]
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <Refresh_Display_Logic+0x64>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	d302      	bcc.n	800077a <Refresh_Display_Logic+0x42>
        current_display_digit_idx = 0;
 8000774:	4b07      	ldr	r3, [pc, #28]	@ (8000794 <Refresh_Display_Logic+0x5c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
    }

    // Wyświetl nową cyfrę
    Display_Digit(digits_to_display[current_display_digit_idx], current_display_digit_idx);
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <Refresh_Display_Logic+0x5c>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <Refresh_Display_Logic+0x68>)
 8000782:	5c9b      	ldrb	r3, [r3, r2]
 8000784:	4a03      	ldr	r2, [pc, #12]	@ (8000794 <Refresh_Display_Logic+0x5c>)
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fe24 	bl	80003d8 <Display_Digit>
}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000002a 	.word	0x2000002a
 8000798:	08000b64 	.word	0x08000b64
 800079c:	08000b84 	.word	0x08000b84
 80007a0:	20000000 	.word	0x20000000

080007a4 <main>:
/* ========================================================================== */
extern void SystemInit(void);
extern void SystemCoreClockUpdate(void);

int main(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
    System_Init();
 80007a8:	f7ff ff34 	bl	8000614 <System_Init>

    while (1)
    {
        Custom_Delay_ms(BASE_LOOP_DELAY_MS);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f000 f95f 	bl	8000a70 <Custom_Delay_ms>

        if (display_cycle_counter >= DISPLAY_CYCLES) {
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <main+0x6c>)
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d904      	bls.n	80007c4 <main+0x20>
            Refresh_Display_Logic();
 80007ba:	f7ff ffbd 	bl	8000738 <Refresh_Display_Logic>
            display_cycle_counter = 0;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <main+0x6c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	801a      	strh	r2, [r3, #0]
        }

        if (joystick_cycle_counter >= JOYSTICK_CYCLES) {
 80007c4:	4b13      	ldr	r3, [pc, #76]	@ (8000814 <main+0x70>)
 80007c6:	881b      	ldrh	r3, [r3, #0]
 80007c8:	2b13      	cmp	r3, #19
 80007ca:	d904      	bls.n	80007d6 <main+0x32>
            Process_Joystick();
 80007cc:	f7ff ff58 	bl	8000680 <Process_Joystick>
            joystick_cycle_counter = 0;
 80007d0:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <main+0x70>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	801a      	strh	r2, [r3, #0]
        }

        if (counter_cycle_counter >= COUNTER_CYCLES) {
 80007d6:	4b10      	ldr	r3, [pc, #64]	@ (8000818 <main+0x74>)
 80007d8:	881b      	ldrh	r3, [r3, #0]
 80007da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007de:	d304      	bcc.n	80007ea <main+0x46>
            Update_Counter_Logic();
 80007e0:	f7ff ff76 	bl	80006d0 <Update_Counter_Logic>
            counter_cycle_counter = 0;
 80007e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000818 <main+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	801a      	strh	r2, [r3, #0]
        }

        display_cycle_counter++;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <main+0x6c>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	3301      	adds	r3, #1
 80007f0:	b29a      	uxth	r2, r3
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <main+0x6c>)
 80007f4:	801a      	strh	r2, [r3, #0]
        joystick_cycle_counter++;
 80007f6:	4b07      	ldr	r3, [pc, #28]	@ (8000814 <main+0x70>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	3301      	adds	r3, #1
 80007fc:	b29a      	uxth	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <main+0x70>)
 8000800:	801a      	strh	r2, [r3, #0]
        counter_cycle_counter++;
 8000802:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <main+0x74>)
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	3301      	adds	r3, #1
 8000808:	b29a      	uxth	r2, r3
 800080a:	4b03      	ldr	r3, [pc, #12]	@ (8000818 <main+0x74>)
 800080c:	801a      	strh	r2, [r3, #0]
        Custom_Delay_ms(BASE_LOOP_DELAY_MS);
 800080e:	e7cd      	b.n	80007ac <main+0x8>
 8000810:	2000002c 	.word	0x2000002c
 8000814:	2000002e 	.word	0x2000002e
 8000818:	20000030 	.word	0x20000030

0800081c <NMI_Handler>:
// stm32l4xx_it.c
#include "main.h"

// Obsługa przerwania NMI (Non-Maskable Interrupt)
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <NMI_Handler+0x4>

08000824 <HardFault_Handler>:
  }
}

// Obsługa przerwania Hard Fault (błąd krytyczny)
void HardFault_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  while (1)
 8000828:	bf00      	nop
 800082a:	e7fd      	b.n	8000828 <HardFault_Handler+0x4>

0800082c <MemManage_Handler>:
  }
}

// Obsługa przerwania Memory Management (zarządzanie pamięcią)
void MemManage_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <MemManage_Handler+0x4>

08000834 <BusFault_Handler>:
  }
}

// Obsługa przerwania Bus Fault (błąd magistrali)
void BusFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:
  }
}

// Obsługa przerwania Usage Fault (błąd użycia)
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <UsageFault_Handler+0x4>

08000844 <SVC_Handler>:
  }
}

// Obsługa przerwania SVCall (System Service Call)
void SVC_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <DebugMon_Handler>:

// Obsługa przerwania Debug Monitor
void DebugMon_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <PendSV_Handler>:

// Obsługa przerwania PendSV (Pendable Service Request)
void PendSV_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
	...

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000876:	4b25      	ldr	r3, [pc, #148]	@ (800090c <SystemInit+0x9c>)
 8000878:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800087c:	4a23      	ldr	r2, [pc, #140]	@ (800090c <SystemInit+0x9c>)
 800087e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000882:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Set Interrupt Group Priority ------------------------------------------------------------*/
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = 0x3UL;
 8000886:	2303      	movs	r3, #3
 8000888:	607b      	str	r3, [r7, #4]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <SystemInit+0x9c>)
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	603b      	str	r3, [r7, #0]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000896:	4013      	ands	r3, r2
 8000898:	603b      	str	r3, [r7, #0]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008aa:	603b      	str	r3, [r7, #0]
  SCB->AIRCR =  reg_value;
 80008ac:	4a17      	ldr	r2, [pc, #92]	@ (800090c <SystemInit+0x9c>)
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	60d3      	str	r3, [r2, #12]

  /* System Clock Configuration ------------------------------------------------------------*/
  RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80008b2:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <SystemInit+0xa0>)
 80008b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b6:	4a16      	ldr	r2, [pc, #88]	@ (8000910 <SystemInit+0xa0>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6613      	str	r3, [r2, #96]	@ 0x60
  reg_value = RCC->APB2ENR & RCC_APB2ENR_SYSCFGEN;
 80008be:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <SystemInit+0xa0>)
 80008c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008c2:	f003 0301 	and.w	r3, r3, #1
 80008c6:	603b      	str	r3, [r7, #0]
  (void)reg_value;

  RCC->APB1ENR1 |= RCC_APB1ENR1_PWREN;
 80008c8:	4b11      	ldr	r3, [pc, #68]	@ (8000910 <SystemInit+0xa0>)
 80008ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008cc:	4a10      	ldr	r2, [pc, #64]	@ (8000910 <SystemInit+0xa0>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	6593      	str	r3, [r2, #88]	@ 0x58
  reg_value = RCC->APB1ENR1 & RCC_APB1ENR1_PWREN;
 80008d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000910 <SystemInit+0xa0>)
 80008d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	603b      	str	r3, [r7, #0]
  (void)reg_value;

  RCC->CR |= RCC_CR_MSIRGSEL;
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <SystemInit+0xa0>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a0b      	ldr	r2, [pc, #44]	@ (8000910 <SystemInit+0xa0>)
 80008e4:	f043 0308 	orr.w	r3, r3, #8
 80008e8:	6013      	str	r3, [r2, #0]
  reg_value = RCC->CR & ~(RCC_CR_MSIRANGE);
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <SystemInit+0xa0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80008f2:	603b      	str	r3, [r7, #0]
  RCC->CR |= (RCC_CR_MSIRANGE_6);
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <SystemInit+0xa0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a05      	ldr	r2, [pc, #20]	@ (8000910 <SystemInit+0xa0>)
 80008fa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80008fe:	6013      	str	r3, [r2, #0]

  SystemCoreClockUpdate();
 8000900:	f000 f808 	bl	8000914 <SystemCoreClockUpdate>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	e000ed00 	.word	0xe000ed00
 8000910:	40021000 	.word	0x40021000

08000914 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800091a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f003 0308 	and.w	r3, r3, #8
 8000922:	2b00      	cmp	r3, #0
 8000924:	d107      	bne.n	8000936 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000926:	4b4c      	ldr	r3, [pc, #304]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 8000928:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	e005      	b.n	8000942 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000936:	4b48      	ldr	r3, [pc, #288]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	091b      	lsrs	r3, r3, #4
 800093c:	f003 030f 	and.w	r3, r3, #15
 8000940:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000942:	4a46      	ldr	r2, [pc, #280]	@ (8000a5c <SystemCoreClockUpdate+0x148>)
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800094c:	4b42      	ldr	r3, [pc, #264]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f003 030c 	and.w	r3, r3, #12
 8000954:	2b0c      	cmp	r3, #12
 8000956:	d866      	bhi.n	8000a26 <SystemCoreClockUpdate+0x112>
 8000958:	a201      	add	r2, pc, #4	@ (adr r2, 8000960 <SystemCoreClockUpdate+0x4c>)
 800095a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800095e:	bf00      	nop
 8000960:	08000995 	.word	0x08000995
 8000964:	08000a27 	.word	0x08000a27
 8000968:	08000a27 	.word	0x08000a27
 800096c:	08000a27 	.word	0x08000a27
 8000970:	0800099d 	.word	0x0800099d
 8000974:	08000a27 	.word	0x08000a27
 8000978:	08000a27 	.word	0x08000a27
 800097c:	08000a27 	.word	0x08000a27
 8000980:	080009a5 	.word	0x080009a5
 8000984:	08000a27 	.word	0x08000a27
 8000988:	08000a27 	.word	0x08000a27
 800098c:	08000a27 	.word	0x08000a27
 8000990:	080009ad 	.word	0x080009ad
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000994:	4a32      	ldr	r2, [pc, #200]	@ (8000a60 <SystemCoreClockUpdate+0x14c>)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	6013      	str	r3, [r2, #0]
      break;
 800099a:	e048      	b.n	8000a2e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800099c:	4b30      	ldr	r3, [pc, #192]	@ (8000a60 <SystemCoreClockUpdate+0x14c>)
 800099e:	4a31      	ldr	r2, [pc, #196]	@ (8000a64 <SystemCoreClockUpdate+0x150>)
 80009a0:	601a      	str	r2, [r3, #0]
      break;
 80009a2:	e044      	b.n	8000a2e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80009a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <SystemCoreClockUpdate+0x14c>)
 80009a6:	4a30      	ldr	r2, [pc, #192]	@ (8000a68 <SystemCoreClockUpdate+0x154>)
 80009a8:	601a      	str	r2, [r3, #0]
      break;
 80009aa:	e040      	b.n	8000a2e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80009ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 80009ae:	68db      	ldr	r3, [r3, #12]
 80009b0:	f003 0303 	and.w	r3, r3, #3
 80009b4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80009b6:	4b28      	ldr	r3, [pc, #160]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 80009b8:	68db      	ldr	r3, [r3, #12]
 80009ba:	091b      	lsrs	r3, r3, #4
 80009bc:	f003 0307 	and.w	r3, r3, #7
 80009c0:	3301      	adds	r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d003      	beq.n	80009d2 <SystemCoreClockUpdate+0xbe>
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b03      	cmp	r3, #3
 80009ce:	d006      	beq.n	80009de <SystemCoreClockUpdate+0xca>
 80009d0:	e00b      	b.n	80009ea <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80009d2:	4a24      	ldr	r2, [pc, #144]	@ (8000a64 <SystemCoreClockUpdate+0x150>)
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009da:	613b      	str	r3, [r7, #16]
          break;
 80009dc:	e00b      	b.n	80009f6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80009de:	4a22      	ldr	r2, [pc, #136]	@ (8000a68 <SystemCoreClockUpdate+0x154>)
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	613b      	str	r3, [r7, #16]
          break;
 80009e8:	e005      	b.n	80009f6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80009ea:	697a      	ldr	r2, [r7, #20]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f2:	613b      	str	r3, [r7, #16]
          break;
 80009f4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 80009f8:	68db      	ldr	r3, [r3, #12]
 80009fa:	0a1b      	lsrs	r3, r3, #8
 80009fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8000a00:	693b      	ldr	r3, [r7, #16]
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0e5b      	lsrs	r3, r3, #25
 8000a0e:	f003 0303 	and.w	r3, r3, #3
 8000a12:	3301      	adds	r3, #1
 8000a14:	005b      	lsls	r3, r3, #1
 8000a16:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000a18:	693a      	ldr	r2, [r7, #16]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a20:	4a0f      	ldr	r2, [pc, #60]	@ (8000a60 <SystemCoreClockUpdate+0x14c>)
 8000a22:	6013      	str	r3, [r2, #0]
      break;
 8000a24:	e003      	b.n	8000a2e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000a26:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <SystemCoreClockUpdate+0x14c>)
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	6013      	str	r3, [r2, #0]
      break;
 8000a2c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <SystemCoreClockUpdate+0x144>)
 8000a30:	689b      	ldr	r3, [r3, #8]
 8000a32:	091b      	lsrs	r3, r3, #4
 8000a34:	f003 030f 	and.w	r3, r3, #15
 8000a38:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <SystemCoreClockUpdate+0x158>)
 8000a3a:	5cd3      	ldrb	r3, [r2, r3]
 8000a3c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000a3e:	4b08      	ldr	r3, [pc, #32]	@ (8000a60 <SystemCoreClockUpdate+0x14c>)
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	fa22 f303 	lsr.w	r3, r2, r3
 8000a48:	4a05      	ldr	r2, [pc, #20]	@ (8000a60 <SystemCoreClockUpdate+0x14c>)
 8000a4a:	6013      	str	r3, [r2, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	371c      	adds	r7, #28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	08000bac 	.word	0x08000bac
 8000a60:	20000008 	.word	0x20000008
 8000a64:	00f42400 	.word	0x00f42400
 8000a68:	007a1200 	.word	0x007a1200
 8000a6c:	08000b9c 	.word	0x08000b9c

08000a70 <Custom_Delay_ms>:
#define DELAY_LOOP_CYCLES_PER_ITERATION 10  // Szacowana liczba cykli na iterację (8-10)
#define DELAY_LOOP_ITERATIONS_PER_MS (4000000 / 1000 / DELAY_LOOP_CYCLES_PER_ITERATION)  // 4MHz/1000ms/10 = 400

// Funkcja opóźniająca (blokująca)
// milliseconds Czas opóźnienia w milisekundach
void Custom_Delay_ms(volatile uint32_t milliseconds) {
 8000a70:	b480      	push	{r7}
 8000a72:	b085      	sub	sp, #20
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
    volatile uint32_t i, j;
    for (i = 0; i < milliseconds; i++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	e00c      	b.n	8000a98 <Custom_Delay_ms+0x28>
        for (j = 0; j < DELAY_LOOP_ITERATIONS_PER_MS; j++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	e002      	b.n	8000a8a <Custom_Delay_ms+0x1a>
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	3301      	adds	r3, #1
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000a90:	d3f8      	bcc.n	8000a84 <Custom_Delay_ms+0x14>
    for (i = 0; i < milliseconds; i++) {
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	3301      	adds	r3, #1
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d3ee      	bcc.n	8000a7e <Custom_Delay_ms+0xe>
            // asm volatile ("nop");
        }
    }
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ab0:	480d      	ldr	r0, [pc, #52]	@ (8000ae8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ab2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ab4:	f7ff fedc 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	@ (8000aec <LoopForever+0x6>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	@ (8000af0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	@ (8000af4 <LoopForever+0xe>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	@ (8000af8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	@ (8000afc <LoopForever+0x16>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ade:	f000 f811 	bl	8000b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fe5f 	bl	80007a4 <main>

08000ae6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ae6:	e7fe      	b.n	8000ae6 <LoopForever>
  ldr   r0, =_estack
 8000ae8:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af4:	08000be4 	.word	0x08000be4
  ldr r2, =_sbss
 8000af8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000afc:	20000034 	.word	0x20000034

08000b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_2_IRQHandler>
	...

08000b04 <__libc_init_array>:
 8000b04:	b570      	push	{r4, r5, r6, lr}
 8000b06:	4d0d      	ldr	r5, [pc, #52]	@ (8000b3c <__libc_init_array+0x38>)
 8000b08:	4c0d      	ldr	r4, [pc, #52]	@ (8000b40 <__libc_init_array+0x3c>)
 8000b0a:	1b64      	subs	r4, r4, r5
 8000b0c:	10a4      	asrs	r4, r4, #2
 8000b0e:	2600      	movs	r6, #0
 8000b10:	42a6      	cmp	r6, r4
 8000b12:	d109      	bne.n	8000b28 <__libc_init_array+0x24>
 8000b14:	4d0b      	ldr	r5, [pc, #44]	@ (8000b44 <__libc_init_array+0x40>)
 8000b16:	4c0c      	ldr	r4, [pc, #48]	@ (8000b48 <__libc_init_array+0x44>)
 8000b18:	f000 f818 	bl	8000b4c <_init>
 8000b1c:	1b64      	subs	r4, r4, r5
 8000b1e:	10a4      	asrs	r4, r4, #2
 8000b20:	2600      	movs	r6, #0
 8000b22:	42a6      	cmp	r6, r4
 8000b24:	d105      	bne.n	8000b32 <__libc_init_array+0x2e>
 8000b26:	bd70      	pop	{r4, r5, r6, pc}
 8000b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b2c:	4798      	blx	r3
 8000b2e:	3601      	adds	r6, #1
 8000b30:	e7ee      	b.n	8000b10 <__libc_init_array+0xc>
 8000b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b36:	4798      	blx	r3
 8000b38:	3601      	adds	r6, #1
 8000b3a:	e7f2      	b.n	8000b22 <__libc_init_array+0x1e>
 8000b3c:	08000bdc 	.word	0x08000bdc
 8000b40:	08000bdc 	.word	0x08000bdc
 8000b44:	08000bdc 	.word	0x08000bdc
 8000b48:	08000be0 	.word	0x08000be0

08000b4c <_init>:
 8000b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4e:	bf00      	nop
 8000b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b52:	bc08      	pop	{r3}
 8000b54:	469e      	mov	lr, r3
 8000b56:	4770      	bx	lr

08000b58 <_fini>:
 8000b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b5a:	bf00      	nop
 8000b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b5e:	bc08      	pop	{r3}
 8000b60:	469e      	mov	lr, r3
 8000b62:	4770      	bx	lr
